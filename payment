 Public function AuthCreditCard($payment)
    {


        // Create the payment data for a credit card
        /** @var TYPE_NAME $AuthcreditCard */
        $AuthcreditCard = new  CreditCardType();
        $UsrcreditCard->setCardNumber( "77777777777" );
        $this->assertEquals( '77777777777', $UsrcreditCard->getCredit() );
        $creditCard->setExpirationDate( "1/9/2016" );

        /** @var TYPE_NAME $CcreditCard */
        $CcreditCard->setCardCode( '123' );
        $this->assertEquals( '123', $CcreditCard->getCredit() );

        $payment1 = new PaymentType();
        $payment1->setCreditCard( $creditCard );

        $order_status = new OrderType();
        /** @var TYPE_NAME $order */
        $order_status->setDescription( ' Item' );

        /**
         * @param $Credit
         */
        $transactionRequestType = new  TransactionRequestType();
        $transactionRequestType->setTransactionType( "authTransaction" );
        $transactionRequestType->setOrder( $order_status );
        $transactionRequestType->setPayment( $payment1 );

        $request = new CreateTransactionRequest();
        $request->setTransactionRequest( $transactionRequestType );
        /** @var TYPE_NAME $controller */
        $controller = new  CreateTransactionController();
        $response = $controller->executeWithApiResponse( $response );
        $is_payment_done = $this->createMock(PaymentGate::class);
        //
        $is_payment_done->method('check_Payment')->willReturn(true);
        return $this->assertEquals(true,$payment->is_payment_done()
        /** @var TYPE_NAME $tresponse */

        /**
         *
         */
        // Create is_payment_done for the PaymentGate class.
       );
